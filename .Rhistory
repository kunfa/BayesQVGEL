devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_cran_comments()
library(BayesQVGEL)
?BayesQVGEL
devtools::build_manual()
devtools::sumbit_cran()
devtools::submit_cran()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::document()
devtools::cran_submit()
devtools::submit_cran()
devtools::build_manual()
devtools::document()
load("data.rda")
getwd()
load("data.rda")
ls()
g
dim(g)
coeff
dim(w)
k
library(MASS)
n=60;m=3;q=3;k=3;p=9
sigma2=1
sig = matrix(0,m,m)
for (i in 1:m)
{
for(j in 1:m)
{
sig[i,j] = 0.5^abs(i-j)
}
}
g = mvrnorm(n,rep(0,m),sig)
g = as.matrix(g)
g = scale(g)
beta_true = rep(0,m)
beta_true[c(1,2)] = runif(2,0.4,0.8)
#generate environment(n*q2)
dummy0 <- as.numeric(g[,1] <= -0.5)
dummy0=dummy0+1
dummy1 <- as.numeric(g[,1] > -0.5 & g[,1] <= 0)
dummy1=dummy1*2+1
dummy2 <- as.numeric(g[,1] > 0 & g[,1] <= 0.5)
dummy2=dummy2*3+1
e = cbind(dummy0,dummy1,dummy2)
e = scale(e)
alpha= runif(6,0.4,0.8)
w = c()
for (i in 1:m)
{
w = cbind(w,g[,i]*e)
}
eta_true = rep(0,p)
eta_true[4:6] = runif(3,0.4,0.8)
eta_true[7:9] = runif(3,0.4,0.8)
coeff = c(beta_true,eta_true)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
ata=runif(c,0,1)
y = matrix(rep(0,n*k),n,k)
for(i in 1:n){
ei = t(replicate(k,e[i,]))
ei = cbind(ei,rep(1,k),c(1:k),c(1:k)^2)
gi = t(replicate(k,g[i,]))
wi = t(replicate(k,w[i,]))
quant=0.5
error = rnorm(k,0,1)
error = error -quantile(error,probs = quant)
y[i,] = ei%*%alpha+gi%*%beta_true+wi%*%eta_true+z%*%ata+error
}
C = cbind(rep(1,k),c(1:k),c(1:k)^2)
save(C,coeff,e,g,k,w,y,file="data.rda")
devtools::document()
devtools::document()
devtools::build_manual()
devtools::submit_cran()

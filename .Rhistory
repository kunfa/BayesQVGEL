g = mvrnorm(n,rep(0,m),sig)
g = as.matrix(g)
g = scale(g)
beta_true = rep(0,m)
beta_true[c(2,4,5)] = runif(3,0.4,0.8)*rbinom(3,1,0.9)+runif(3,0.01,0.05)
#generate environment(n*q2)
dummy0 <- as.numeric(g[,1] <= -0.5)
dummy0=dummy0+1
dummy1 <- as.numeric(g[,1] > -0.5 & g[,1] <= 0)
dummy1=dummy1*2+1
dummy2 <- as.numeric(g[,1] > 0 & g[,1] <= 0.5)
dummy2=dummy2*3+1
e = cbind(dummy0,dummy1,dummy2)
e = scale(e)
e = cbind(rep(1,n),e)
alpha= runif(6,0.4,0.8)
w = c()
for (i in 1:m)
{
w = cbind(w,g[,i]*e[,-1])
}
eta_true = rep(0,p)
eta_true[4:6] = runif(3,0.4,0.8)*rbinom(3,1,0.75)+runif(3,0.01,0.05)
eta_true[7:9] = runif(3,0.4,0.8)
eta_true[13:15] = runif(3,0.4,0.8)*rbinom(3,1,0.75)+runif(3,0.01,0.05)
betas_true = c(beta_true,eta_true)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
ata=runif(c,0,1)
y = matrix(rep(0,n*k),n,k)
for(i in 1:n){
ei = t(replicate(k,e[i,]))
ei = cbind(ei,c(1:k),c(1:k)^2)
gi = t(replicate(k,g[i,]))
wi = t(replicate(k,w[i,]))
quant=0.5
error = rnorm(k,0,1)
error = error -quantile(error,probs = quant)
y[i,] = ei%*%alpha+gi%*%beta_true+wi%*%eta_true+z%*%ata+error
}
coeff = betas_true
save(y,e,g,w,k,coeff,file="data.rda")
library(rolong)
remove.packages("rolong")
library(rolong)
?rolong
library(MASS)
n=60;m=5;q=3;k=3;p=15
sigma2=1
sig = matrix(0,m,m)
for (i in 1:m)
{
for(j in 1:m)
{
sig[i,j] = 0.5^abs(i-j)
}
}
g = mvrnorm(n,rep(0,m),sig)
g = as.matrix(g)
g = scale(g)
beta_true = rep(0,m)
beta_true[c(2,4,5)] = runif(3,0.4,0.8)*rbinom(3,1,0.9)+runif(3,0.01,0.05)
#generate environment(n*q2)
dummy0 <- as.numeric(g[,1] <= -0.5)
dummy0=dummy0+1
dummy1 <- as.numeric(g[,1] > -0.5 & g[,1] <= 0)
dummy1=dummy1*2+1
dummy2 <- as.numeric(g[,1] > 0 & g[,1] <= 0.5)
dummy2=dummy2*3+1
e = cbind(dummy0,dummy1,dummy2)
e = scale(e)
e = cbind(rep(1,n),e)
alpha= runif(6,0.4,0.8)
w = c()
for (i in 1:m)
{
w = cbind(w,g[,i]*e[,-1])
}
eta_true = rep(0,p)
eta_true[4:6] = runif(3,0.4,0.8)*rbinom(3,1,0.75)+runif(3,0.01,0.05)
eta_true[7:9] = runif(3,0.4,0.8)
eta_true[13:15] = runif(3,0.4,0.8)*rbinom(3,1,0.75)+runif(3,0.01,0.05)
betas_true = c(beta_true,eta_true)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
ata=runif(c,0,1)
y = matrix(rep(0,n*k),n,k)
for(i in 1:n){
ei = t(replicate(k,e[i,]))
ei = cbind(ei,c(1:k),c(1:k)^2)
gi = t(replicate(k,g[i,]))
wi = t(replicate(k,w[i,]))
quant=0.5
error = rnorm(k,0,1)
error = error -quantile(error,probs = quant)
y[i,] = ei%*%alpha+gi%*%beta_true+wi%*%eta_true+z%*%ata+error
}
coeff = betas_true
beta=rolong(y,e,g,w,k,structure=c("group"))
selection_sparse = function(obj,burn.in=obj$burn.in){
sg1 = obj$posterior$GS.beta
sg1[which(sg1!=0)]=1
sg2 = obj$posterior$GS.eta
sg2[which(sg2!=0)]=1
main=c()
for(j in 1:ncol(sg1)){
t1=as.matrix(sg1[,j])
t1 = t1[-c(1:burn.in),]
q_t1 = mpm(t1)
main = c(main,q_t1)
}
inter=c()
for(j in 1:ncol(sg2)){
t2=as.matrix(sg2[,j])
t2 = t2[-c(1:burn.in),]
q_t2 = mpm(t2)
inter = c(inter,q_t2)
}
inde = c(main,inter)
inde = list(inde)
inde
}
selection_nonsparse = function(obj,burn.in=obj$burn.in){
sg1 = obj$posterior$GS.beta
sg2 = obj$posterior$GS.eta
q_t1=c()
for(j in 1:ncol(sg1)){
t1=as.matrix(sg1[,j])
t1 = t1[-c(1:burn.in),]
q_t1 = as.matrix(stats::quantile(t1,c(0.025,0.975)))
}
main = apply(q_t1, 2, fun)
q_t2=c()
for(j in 1:ncol(sg2)){
t2=as.matrix(sg2[,j])
t2 = t2[-c(1:burn.in),]
q_t2 = as.matrix(stats::quantile(t2,c(0.025,0.975)))
}
inter = apply(q_t2, 2, fun)
inde = c(main,inter)
inde = list(inde)
inde
}
mpm <- function(x)
{
if (mean(x) >= 0.5) {1}
else {0}
}
fun <- function(x)
{
pp = prod(x)
if(sign(pp)==1) {1}
else {0}
}
selection = function(obj,sparse){
if(sparse){
inde = selection_sparse(obj,burn.in=obj$burn.in)
}
else{
inde = selection_nonsparse(obj,burn.in=obj$burn.in)
}
out = list(inde)
out
}
b = selection(fit,sparse=TRUE)
b = selection(beta,sparse=TRUE)
b
index = which(coeff!=0)
index
pos = which(b != 0)
pos
class(b)
class(coeff)
as.vector(b)
pos = which(b != 0)
pos
a=selection_sparse(beta,burn.in = beta$burn.in)
a
which(a=!0)
which(a!=0)
selection_sparse = function(obj,burn.in=obj$burn.in){
sg1 = obj$posterior$GS.beta
sg1[which(sg1!=0)]=1
sg2 = obj$posterior$GS.eta
sg2[which(sg2!=0)]=1
main=c()
for(j in 1:ncol(sg1)){
t1=as.matrix(sg1[,j])
t1 = t1[-c(1:burn.in),]
q_t1 = mpm(t1)
main = c(main,q_t1)
}
inter=c()
for(j in 1:ncol(sg2)){
t2=as.matrix(sg2[,j])
t2 = t2[-c(1:burn.in),]
q_t2 = mpm(t2)
inter = c(inter,q_t2)
}
inde = c(main,inter)
inde
}
a=selection_sparse(beta,burn.in = beta$burn.in)
a
which(a!=0)
v = selection(beta,sparse=TRUE)
v
selection = function(obj,sparse){
if(sparse){
inde = selection_sparse(obj,burn.in=obj$burn.in)
}
else{
inde = selection_nonsparse(obj,burn.in=obj$burn.in)
}
out = inde
out
}
v = selection(beta,sparse=TRUE)
v
library(rolong)
remove.packages("rolong")
library(rolong)
?rolong
library(MASS)
n=60;m=3;q=3;k=3;p=9
sigma2=1
sig = matrix(0,m,m)
for (i in 1:m)
{
for(j in 1:m)
{
sig[i,j] = 0.5^abs(i-j)
}
}
g = mvrnorm(n,rep(0,m),sig)
g = as.matrix(g)
g = scale(g)
beta_true = rep(0,m)
beta_true[c(1,2)] = runif(2,0.4,0.8)
#generate environment(n*q2)
dummy0 <- as.numeric(g[,1] <= -0.5)
dummy0=dummy0+1
dummy1 <- as.numeric(g[,1] > -0.5 & g[,1] <= 0)
dummy1=dummy1*2+1
dummy2 <- as.numeric(g[,1] > 0 & g[,1] <= 0.5)
dummy2=dummy2*3+1
e = cbind(dummy0,dummy1,dummy2)
e = scale(e)
e = cbind(rep(1,n),e)
alpha= runif(6,0.4,0.8)
w = c()
for (i in 1:m)
{
w = cbind(w,g[,i]*e[,-1])
}
eta_true = rep(0,p)
eta_true[4:6] = runif(3,0.4,0.8)
eta_true[7:9] = runif(3,0.4,0.8)
betas_true = c(beta_true,eta_true)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
ata=runif(c,0,1)
y = matrix(rep(0,n*k),n,k)
for(i in 1:n){
ei = t(replicate(k,e[i,]))
ei = cbind(ei,c(1:k),c(1:k)^2)
gi = t(replicate(k,g[i,]))
wi = t(replicate(k,w[i,]))
quant=0.5
error = rnorm(k,0,1)
error = error -quantile(error,probs = quant)
y[i,] = ei%*%alpha+gi%*%beta_true+wi%*%eta_true+z%*%ata+error
}
coeff = betas_true
save(y,e,g,w,k,coeff,file="data.rda")
remove.packages("rolong")
library(rolong)
?rolong
library(MASS)
n=20;m=3;q=3;k=3;p=9
sigma2=1
sig = matrix(0,m,m)
for (i in 1:m)
{
for(j in 1:m)
{
sig[i,j] = 0.5^abs(i-j)
}
}
g = mvrnorm(n,rep(0,m),sig)
g = as.matrix(g)
g = scale(g)
beta_true = rep(0,m)
beta_true[c(1,2)] = runif(2,0.4,0.8)
#generate environment(n*q2)
dummy0 <- as.numeric(g[,1] <= -0.5)
dummy0=dummy0+1
dummy1 <- as.numeric(g[,1] > -0.5 & g[,1] <= 0)
dummy1=dummy1*2+1
dummy2 <- as.numeric(g[,1] > 0 & g[,1] <= 0.5)
dummy2=dummy2*3+1
e = cbind(dummy0,dummy1,dummy2)
e = scale(e)
e = cbind(rep(1,n),e)
alpha= runif(6,0.4,0.8)
w = c()
for (i in 1:m)
{
w = cbind(w,g[,i]*e[,-1])
}
eta_true = rep(0,p)
eta_true[4:6] = runif(3,0.4,0.8)
eta_true[7:9] = runif(3,0.4,0.8)
betas_true = c(beta_true,eta_true)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
ata=runif(c,0,1)
y = matrix(rep(0,n*k),n,k)
for(i in 1:n){
ei = t(replicate(k,e[i,]))
ei = cbind(ei,c(1:k),c(1:k)^2)
gi = t(replicate(k,g[i,]))
wi = t(replicate(k,w[i,]))
quant=0.5
error = rnorm(k,0,1)
error = error -quantile(error,probs = quant)
y[i,] = ei%*%alpha+gi%*%beta_true+wi%*%eta_true+z%*%ata+error
}
coeff = betas_true
save(y,e,g,w,k,coeff,file="data.rda")
remove.packages("rolong")
library(rolong)
?rolong
library(MASS)
n=40;m=3;q=3;k=3;p=9
sigma2=1
sig = matrix(0,m,m)
for (i in 1:m)
{
for(j in 1:m)
{
sig[i,j] = 0.5^abs(i-j)
}
}
g = mvrnorm(n,rep(0,m),sig)
g = as.matrix(g)
g = scale(g)
beta_true = rep(0,m)
beta_true[c(1,2)] = runif(2,0.4,0.8)
#generate environment(n*q2)
dummy0 <- as.numeric(g[,1] <= -0.5)
dummy0=dummy0+1
dummy1 <- as.numeric(g[,1] > -0.5 & g[,1] <= 0)
dummy1=dummy1*2+1
dummy2 <- as.numeric(g[,1] > 0 & g[,1] <= 0.5)
dummy2=dummy2*3+1
e = cbind(dummy0,dummy1,dummy2)
e = scale(e)
e = cbind(rep(1,n),e)
alpha= runif(6,0.4,0.8)
w = c()
for (i in 1:m)
{
w = cbind(w,g[,i]*e[,-1])
}
eta_true = rep(0,p)
eta_true[4:6] = runif(3,0.4,0.8)
eta_true[7:9] = runif(3,0.4,0.8)
betas_true = c(beta_true,eta_true)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
ata=runif(c,0,1)
y = matrix(rep(0,n*k),n,k)
for(i in 1:n){
ei = t(replicate(k,e[i,]))
ei = cbind(ei,c(1:k),c(1:k)^2)
gi = t(replicate(k,g[i,]))
wi = t(replicate(k,w[i,]))
quant=0.5
error = rnorm(k,0,1)
error = error -quantile(error,probs = quant)
y[i,] = ei%*%alpha+gi%*%beta_true+wi%*%eta_true+z%*%ata+error
}
coeff = betas_true
save(y,e,g,w,k,coeff,file="data.rda")
remove.packages("rolong")
library(rolong)
?rolong
library(MASS)
n=60;m=3;q=3;k=3;p=9
sigma2=1
sig = matrix(0,m,m)
for (i in 1:m)
{
for(j in 1:m)
{
sig[i,j] = 0.5^abs(i-j)
}
}
g = mvrnorm(n,rep(0,m),sig)
g = as.matrix(g)
g = scale(g)
beta_true = rep(0,m)
beta_true[c(1,2)] = runif(2,0.4,0.8)
#generate environment(n*q2)
dummy0 <- as.numeric(g[,1] <= -0.5)
dummy0=dummy0+1
dummy1 <- as.numeric(g[,1] > -0.5 & g[,1] <= 0)
dummy1=dummy1*2+1
dummy2 <- as.numeric(g[,1] > 0 & g[,1] <= 0.5)
dummy2=dummy2*3+1
e = cbind(dummy0,dummy1,dummy2)
e = scale(e)
e = cbind(rep(1,n),e)
alpha= runif(6,0.4,0.8)
w = c()
for (i in 1:m)
{
w = cbind(w,g[,i]*e[,-1])
}
eta_true = rep(0,p)
eta_true[4:6] = runif(3,0.4,0.8)
eta_true[7:9] = runif(3,0.4,0.8)
betas_true = c(beta_true,eta_true)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
ata=runif(c,0,1)
y = matrix(rep(0,n*k),n,k)
for(i in 1:n){
ei = t(replicate(k,e[i,]))
ei = cbind(ei,c(1:k),c(1:k)^2)
gi = t(replicate(k,g[i,]))
wi = t(replicate(k,w[i,]))
quant=0.5
error = rnorm(k,0,1)
error = error -quantile(error,probs = quant)
y[i,] = ei%*%alpha+gi%*%beta_true+wi%*%eta_true+z%*%ata+error
}
coeff = betas_true
save(y,e,g,w,k,coeff,file="data.rda")
remove.packages("rolong")
library(rolong)
?rolong
devtools::build_manual()
library(MASS)
n=60;m=3;q=3;k=3;p=9
sigma2=1
sig = matrix(0,m,m)
for (i in 1:m)
{
for(j in 1:m)
{
sig[i,j] = 0.5^abs(i-j)
}
}
g = mvrnorm(n,rep(0,m),sig)
g = as.matrix(g)
g = scale(g)
beta_true = rep(0,m)
beta_true[c(1,2)] = runif(2,0.4,0.8)
#generate environment(n*q2)
dummy0 <- as.numeric(g[,1] <= -0.5)
dummy0=dummy0+1
dummy1 <- as.numeric(g[,1] > -0.5 & g[,1] <= 0)
dummy1=dummy1*2+1
dummy2 <- as.numeric(g[,1] > 0 & g[,1] <= 0.5)
dummy2=dummy2*3+1
e = cbind(dummy0,dummy1,dummy2)
e = scale(e)
e = cbind(rep(1,n),e)
alpha= runif(6,0.4,0.8)
w = c()
for (i in 1:m)
{
w = cbind(w,g[,i]*e[,-1])
}
eta_true = rep(0,p)
eta_true[4:6] = runif(3,0.4,0.8)
eta_true[7:9] = runif(3,0.4,0.8)
betas_true = c(beta_true,eta_true)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
ata=runif(c,0,1)
C = cbind(c(1:k),c(1:k)^2)
y = matrix(rep(0,n*k),n,k)
for(i in 1:n){
ei = t(replicate(k,e[i,]))
ei = cbind(ei,c(1:k),c(1:k)^2)
gi = t(replicate(k,g[i,]))
wi = t(replicate(k,w[i,]))
quant=0.5
error = rnorm(k,0,1)
error = error -quantile(error,probs = quant)
y[i,] = ei%*%alpha+gi%*%beta_true+wi%*%eta_true+z%*%ata+error
}
coeff = betas_true
save(y,e,C,g,w,k,coeff,file="data.rda")
devtools::build_manual()
devtools::build_manual()
devtools::build_readme()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
devtools::build_readme()
usethis::use_readme_rmd()
devtools::build_readme()
devtools::build_manual()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::cran_sumbit()
devtools::submit_cran()
install.packages(c("glmnet", "RcppArmadillo"))
